#!/usr/bin/env node
const Sentry = require("@sentry/node")
const { ProfilingIntegration } = require("@sentry/profiling-node")
const Express = require('express');
const http = require('http');
const apiApp = require('../api/apiApp');
const config = require('config')
const sentryDsn = config.get('sentry_dsn')
const logger = require('../api/lib/log')


process.on('uncaughtException', function(err) {
  logger.error('uncaught exception', { err })
  throw err;
});

// create main app
const mainApp = Express();

if (sentryDsn != '') {
  Sentry.init({
    environment: process.env.NODE_ENV,
    release: "meirim-server#" + process.env.VERSION,
    dsn: sentryDsn,
    integrations: [
      // enable HTTP calls tracing
      new Sentry.Integrations.Http({ tracing: true }),
      // enable Express.js middleware tracing
      new Sentry.Integrations.Express({ app: mainApp }),
      new ProfilingIntegration(),
    ],
    // Performance Monitoring
    tracesSampleRate: 1.0, //  Capture 100% of the transactions
    // Set sampling rate for profiling - this is relative to tracesSampleRate
    profilesSampleRate: 1.0,
  });
}


// TODO: implement health check!
mainApp.use('/health', (req, res) => {
  res.sendStatus(200);
})

mainApp.use('/version', (req, res) => {
  res.send({
    commit: process.env.VERSION,
    url: `https://github.com/meirim-org/meirim/commit/${process.env.VERSION}`,
  });
})

// mount api and static apps
mainApp.get('/test', (req, res) => { res.sendStatus(200) } )
mainApp.use('/api', apiApp);

const server = http.createServer(mainApp);
const port = normalizePort(process.env.PORT || '80');
server.listen(port);

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  logger.info('Listening on ' + bind);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
